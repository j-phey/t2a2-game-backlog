from flask import Blueprint, jsonify, request, abort
from main import db
from models.games import Game
from models.users import User
from schemas.game_schema import game_schema, games_schema
from datetime import date
from flask_jwt_extended import jwt_required, get_jwt_identity

games = Blueprint('games', __name__, url_prefix="/games")

# - GAME ROUTES -

# Route: GET list of /games

@games.route("/", methods=["GET"])
def get_games():
    # Get all the games from the database
    stmt = db.select(Game)
    games = db.session.scalars(stmt)
    # Converting the games from the database into a JSON format and storing them in 'result'
    result = games_schema.dump(games)
    # Returning the result in JSON format
    return jsonify(result)

# Route: GET a single game 
@games.route("/<int:id>/", methods=["GET"])
def get_game(id):
    stmt = db.select(Game).filter_by(id=id)
    game = db.session.scalar(stmt)
    # Returns an error if the game doesn't exist
    if not game:
        return abort(400, description= "Game does not exist")
    # Convert the games from the database into a JSON format and store them in result
    result = game_schema.dump(game)
    # return the data in JSON format
    return jsonify(result)


#  Route: POST Create a new game entry

@games.route("/", methods=["POST"])
@jwt_required()
def game_create():
    #Create a game entry
    game_fields = game_schema.load(request.json)

    new_game = Game()
    new_game.title = game_fields["title"]
    new_game.description = game_fields["description"]
    new_game.release_date = game_fields["release_date"]
    new_game.genre = game_fields["genre"]
    new_game.platform = game_fields["platform"]
    new_game.date = date.today() # Generated by the server
    # Add to the database and commit
    db.session.add(new_game)
    db.session.commit()
    # Return the game in the response
    return jsonify(game_schema.dump(new_game))


# Route: Update a game 
 
@games.route("/<int:id>/", methods=["PUT"])
@jwt_required()
def update_game(id):
    # Create a new game
    game_fields = game_schema.load(request.json)

    # Get the user id by invoking get_jwt_identity
    user_id = get_jwt_identity()
    # Find the user in the db
    stmt = db.select(User).filter_by(id=user_id)
    user = db.session.scalar(stmt)
    # Make sure the user is in the database
    if not user:
        return abort(401, description="Invalid user")
    # Stop the request if the user is not an admin
    if not user.admin:
        return abort(401, description="Unauthorised user")
    # Find the game
    stmt = db.select(Game).filter_by(id=id)
    game = db.session.scalar(stmt)
    # Return an error if the game doesn't exist
    if not game:
        return abort(400, description= "Game does not exist")
    # Update the game with the given values
    game.title = game_fields["title"]
    game.description = game_fields["description"]
    game.release_date = game_fields["release_date"]
    game.genre = game_fields["genre"]
    game.platform = game_fields["platform"]
    game.date = date.today() # Generated by the server
    # Add to the database and commit
    db.session.commit()
    # Return the game in the response
    return jsonify(game_schema.dump(game))


# Route: Delete a game

# /<int:id> lets the server know what game we want to delete 
@games.route("/<int:id>", methods=["DELETE"])
@jwt_required()
# Include the id parameter
def game_delete(id):
    # Get the user id by invoking get_jwt_identity()
    user_id = get_jwt_identity()
    # Find the user in the db
    stmt = db.select(User).filter_by(id=user_id)
    user = db.session.scalar(stmt)
    # Make sure the user is in the database
    if not user:
        return abort(401, description="Invalid user")
    # Prevents the request if the user is not an admin
    if not user.admin:
        return abort(401, description="Unauthorised user")

    # Find the game
    stmt = db.select(Game).filter_by(id=id)
    game = db.session.scalar(stmt)
    # Return an error if the game doesn't exist
    if not game:
        return abort(400, description= "Game doesn't exist")
    #D elete the game from the database and commit the change
    db.session.delete(game)
    db.session.commit()
    # Return the game as the response
    return jsonify(game_schema.dump(game))


# Route: Search / Filter for a game

@games.route("/search", methods=["GET"])
def search_games():
    # Create an empty list in case the query string is not valid
    games_list = []
    # Allow searching by genre and platform
    if request.args.get('genre'):
        stmt = db.select(Game).filter_by(genre= request.args.get('genre'))
        games_list = db.session.scalars(stmt)
    elif request.args.get('platform'):
        stmt = db.select(Game).filter_by(platform= request.args.get('platform'))
        games_list = db.session.scalars(stmt)

    result = games_schema.dump(games_list)
    # Return the data in JSON format
    return jsonify(result)